// This file was generated by Mendix Modeler 7.18.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package localeswitcher.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the LocaleSwitcher module
	public static localeswitcher.proxies.LocaleReview dS_GetOrCreateLocale(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "LocaleSwitcher.DS_GetOrCreateLocale", params);
			return result == null ? null : localeswitcher.proxies.LocaleReview.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static system.proxies.TimeZone getTimeZoneForString(IContext context, java.lang.String _timeZone)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("TimeZone", _timeZone);
			IMendixObject result = (IMendixObject)Core.execute(context, "LocaleSwitcher.GetTimeZoneForString", params);
			return result == null ? null : system.proxies.TimeZone.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mB_ApplyChangeToUser(IContext context, localeswitcher.proxies.LocaleReview _localeReview)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocaleReview", _localeReview == null ? null : _localeReview.getMendixObject());
			Core.execute(context, "LocaleSwitcher.MB_ApplyChangeToUser", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mB_CloseAndResetLocaleReview(IContext context, localeswitcher.proxies.LocaleReview _localeReview)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocaleReview", _localeReview == null ? null : _localeReview.getMendixObject());
			Core.execute(context, "LocaleSwitcher.MB_CloseAndResetLocaleReview", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mB_GetLocaleAndEnableChange(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "LocaleSwitcher.MB_GetLocaleAndEnableChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mB_TestDateAndTZ(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "LocaleSwitcher.MB_TestDateAndTZ", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void mB_ToggleNotificationDisplay(IContext context, localeswitcher.proxies.LocaleReview _localeReview)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocaleReview", _localeReview == null ? null : _localeReview.getMendixObject());
			Core.execute(context, "LocaleSwitcher.MB_ToggleNotificationDisplay", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean needsLanguageChange(IContext context, system.proxies.Language _recommendedLanguage)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RecommendedLanguage", _recommendedLanguage == null ? null : _recommendedLanguage.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "LocaleSwitcher.NeedsLanguageChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String needsTimeZoneChange(IContext context, system.proxies.TimeZone _recommendedTimeZone)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("RecommendedTimeZone", _recommendedTimeZone == null ? null : _recommendedTimeZone.getMendixObject());
			return (java.lang.String)Core.execute(context, "LocaleSwitcher.NeedsTimeZoneChange", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String oC_DetectAndRedirect(IContext context, localeswitcher.proxies.LocaleReview _localeReview)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocaleReview", _localeReview == null ? null : _localeReview.getMendixObject());
			return (java.lang.String)Core.execute(context, "LocaleSwitcher.OC_DetectAndRedirect", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oC_EvaluateLocaleAndTimeZone(IContext context, localeswitcher.proxies.LocaleReview _localeReview)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("LocaleReview", _localeReview == null ? null : _localeReview.getMendixObject());
			Core.execute(context, "LocaleSwitcher.OC_EvaluateLocaleAndTimeZone", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean signOutIn(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "LocaleSwitcher.SignOutIn", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean startup(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "LocaleSwitcher.Startup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}