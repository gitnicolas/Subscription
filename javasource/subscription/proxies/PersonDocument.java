// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package subscription.proxies;

public class PersonDocument extends system.proxies.FileDocument
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Subscription.PersonDocument";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		PersonDocument_Person("Subscription.PersonDocument_Person");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public PersonDocument(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Subscription.PersonDocument"));
	}

	protected PersonDocument(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject personDocumentMendixObject)
	{
		super(context, personDocumentMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Subscription.PersonDocument", personDocumentMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Subscription.PersonDocument");
	}

	/**
	 * @deprecated Use 'PersonDocument.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static subscription.proxies.PersonDocument initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return subscription.proxies.PersonDocument.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static subscription.proxies.PersonDocument initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new subscription.proxies.PersonDocument(context, mendixObject);
	}

	public static subscription.proxies.PersonDocument load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return subscription.proxies.PersonDocument.initialize(context, mendixObject);
	}

	public static java.util.List<subscription.proxies.PersonDocument> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<subscription.proxies.PersonDocument> result = new java.util.ArrayList<subscription.proxies.PersonDocument>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Subscription.PersonDocument" + xpathConstraint))
			result.add(subscription.proxies.PersonDocument.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of PersonDocument_Person
	 */
	public final subscription.proxies.Person getPersonDocument_Person() throws com.mendix.core.CoreException
	{
		return getPersonDocument_Person(getContext());
	}

	/**
	 * @param context
	 * @return value of PersonDocument_Person
	 */
	public final subscription.proxies.Person getPersonDocument_Person(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		subscription.proxies.Person result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.PersonDocument_Person.toString());
		if (identifier != null)
			result = subscription.proxies.Person.load(context, identifier);
		return result;
	}

	/**
	 * Set value of PersonDocument_Person
	 * @param persondocument_person
	 */
	public final void setPersonDocument_Person(subscription.proxies.Person persondocument_person)
	{
		setPersonDocument_Person(getContext(), persondocument_person);
	}

	/**
	 * Set value of PersonDocument_Person
	 * @param context
	 * @param persondocument_person
	 */
	public final void setPersonDocument_Person(com.mendix.systemwideinterfaces.core.IContext context, subscription.proxies.Person persondocument_person)
	{
		if (persondocument_person == null)
			getMendixObject().setValue(context, MemberNames.PersonDocument_Person.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.PersonDocument_Person.toString(), persondocument_person.getMendixObject().getId());
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final subscription.proxies.PersonDocument that = (subscription.proxies.PersonDocument) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Subscription.PersonDocument";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
